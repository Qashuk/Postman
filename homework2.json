{
	"info": {
		"_postman_id": "6bc9f09c-039c-4730-a171-dcad0e26c3f5",
		"name": "Hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23865400"
	},
	"item": [
		{
			"name": "task1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
							"    console.log(response.json());",
							"});",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Проверить, что в body приходит правильный string",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"    var jsonData = pm.response.json();",
							"// 4.Проверить, что name в ответе равно name s request (name вбить руками.)",
							"var resp_name = jsonData.name",
							"console.log(\"Resp_name =\" + resp_name)",
							"pm.test(\"Resp_Req_Name_check\", function () {",
							"pm.expect(resp_name).to.eql(\"vitalii\");",
							"});",
							"// 5.  Проверить, что age в ответе равно age s request (age вбить руками.)",
							"var resp_age = jsonData.age",
							"console.log(\"Resp_age =\" + resp_age)",
							"pm.test(\"Resp_Req_Age_check\", function () {",
							"pm.expect(resp_age).to.eql(\"27\");",
							"});",
							"// 6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"var resp_salary = jsonData.salary",
							"console.log(\"Resp_salary =\" + resp_salary)",
							"pm.test(\"Resp_Req_Salary_check\", function () {",
							"pm.expect(resp_salary).to.eql(3000);",
							"});",
							"// 7. Спарсить request",
							"var request = request.data;",
							"console.log(\"Request =\" + request)",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Resp_Req_name_auto_check\", function () {",
							"pm.expect(resp_name).to.eql(request.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Resp_Req_age_auto_check\", function () {",
							"pm.expect(resp_age).to.eql(request.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Resp_Req_salary_auto_check\", function () {",
							"pm.expect(resp_salary).to.eql(+request.salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response",
							"console.log(jsonData.family)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Check_u_salary_1_5=salary*4\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vitalii",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "task3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"var resp_body = pm.response.json();",
							"// 4. Спарсить request",
							"var req_param = pm.request.url.query.toObject();",
							"console.log(resp_body, req_param)",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check_req_resp_name\", function () {",
							"    pm.expect(resp_body.name).to.eql(req_param.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check_req_resp_age\", function () {",
							"    pm.expect(resp_body.age).to.eql(req_param.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check_req_resp_salary\", function () {",
							"    pm.expect(resp_body.salary).to.eql(+req_param.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response",
							"console.log(resp_body.family)",
							"// 9. Проверить, что у параметра dog есть параметры name",
							"pm.test(\"dog_has_name\", function () {",
							"  pm.expect(resp_body.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age",
							"pm.test(\"dog_has_age\", function () {",
							"  pm.expect(resp_body.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky",
							"pm.test(\"dog_has_name_Luky\", function () {",
							"  pm.expect(resp_body.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4",
							"pm.test(\"dog_has_age_4\", function () {",
							"  pm.expect(resp_body.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=vitalii&age=27&salary=300",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vitalii"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"var resp_body = pm.response.json();",
							"// 4. Спарсить request",
							"var req_param = pm.request.url.query.toObject();",
							"console.log(resp_body, req_param)",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check_req_resp_name\", function () {",
							"    pm.expect(resp_body.name).to.eql(req_param.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check_req_resp_age\", function () {",
							"    pm.expect(resp_body.age).to.eql(+req_param.age);",
							"});",
							"//  7. Вывести в консоль параметр salary из request",
							"console.log(+req_param.salary);",
							"// 8. Вывести в консоль параметр salary из response",
							"console.log(resp_body.salary);",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(resp_body.salary[0]);",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(+resp_body.salary[1]);",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(+resp_body.salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check_salary[0]\", function () {",
							"    pm.expect(resp_body.salary[0]).to.eql(+req_param.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check_salary[1]\", function () {",
							"    pm.expect(+resp_body.salary[1]).to.eql(req_param.salary*2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check_salary[2]\", function () {",
							"    pm.expect(+resp_body.salary[2]).to.eql(req_param.salary*3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"// Done from Postman interface",
							"// 16. Создать в окружении переменную age",
							"// Done from Postman interface",
							"// 17. Создать в окружении переменную salary",
							"// Done from Postman interface",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", resp_body.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", resp_body.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", resp_body.salary[0]);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"// var step;",
							"for (var i = 0; i < resp_body.salary.length; i++) {",
							"    console.log(i,\"salary =\", resp_body.salary[i]);",
							"}",
							"// Или так:",
							"for(var i in resp_body.salary) {",
							"    console.log(resp_body.salary[i])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=vitalii&age=27&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "vitalii"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"var salary = pm.environment.get(\"salary\");",
							"// 2. Вставить параметр age из окружения в age",
							"var age = pm.environment.get(\"age\");",
							"// 3. Вставить параметр name из окружения в name",
							"var name = pm.environment.get(\"name\");",
							"// 4. Отправить запрос",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json",
							"var response = pm.response.json();",
							"console.log(response)",
							"// 7. Спарсить request",
							"var request = request.data;",
							"console.log(request)",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {",
							"    pm.expect(response).to.have.property(\"start_qa_salary\");",
							" });",
							"//  9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {",
							"    pm.expect(response).to.have.property(\"qa_salary_after_6_months\");",
							" });",
							"//  10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {",
							"    pm.expect(response).to.have.property(\"qa_salary_after_12_months\");",
							" });",
							"//  11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {",
							"    pm.expect(response).to.have.property(\"qa_salary_after_1.5_year\");",
							" });",
							"//  12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {",
							"    pm.expect(response).to.have.property(\"qa_salary_after_3.5_years\");",
							" });",
							"//  13. Проверить, что json response имеет параметр person",
							"pm.test(\"json response имеет параметр person\", function () {",
							"    pm.expect(response).to.have.property(\"person\");",
							" });",
							"//  14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check response.start_qa_salary=request.salary\", function () {",
							"    pm.expect(response.start_qa_salary).to.eql(+request.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check response.qa_salary_after_6_months=request.salary\", function () {",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check response.qa_salary_after_12_months=request.salary\", function () {",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check response.qa_salary_after_1.5_year=request.salary\", function () {",
							"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.eql(request.salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check response.qa_salary_after_3.5_year=request.salary\", function () {",
							"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.eql(request.salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check_person.u_name[1]=request.salary\", function () {",
							"    pm.expect(response.person.u_name[1]).to.eql(+request.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check_person.u_age=request.age\", function () {",
							"    pm.expect(response.person.u_age).to.eql(+request.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Check response.u_salary_5_years=request.salary*4.2\", function () {",
							"    pm.expect(response.person.u_salary_5_years).to.eql(+request.salary*4.2);",
							"});",
							"// 22. *Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for(var i in response.person) {",
							"    console.log(response.person[i])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vitalii",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
